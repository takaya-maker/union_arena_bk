# WEBアプリケーションの作成を試みています。 ご協力をお願いしたいです。
## アプリケーション概要 今回作成するWEBアプリケーションはUNION ARENAと呼ばれるオフライン利用が普及しているカードゲームをオンラインでできるようにしたいということから、WEBアプリケーション上でUNION ARENAのカードゲームを遊べる環境を構築したいと考えています。
## カードゲームの概要 ka-do https://www.unionarena-tcg.com/jp/pdf/rule_manual.pdf?20230818

 # 技術スタックについてはReactを採用したいと考えています。 BEについてはPythonで構築を行いFEのReactとやり取りが行えるような環境を構想しています。
# 開発モデル アジャイル開発のモデルを採用して開発を進めていきたいです。 最終的にはリアルタイムで対人が行えるようにしたいです。 ※現時点ではモックを利用した逐次テスト環境が行えるようにしたいため小規模でテスト可能な環境も含めて実装を行える環境を想定しています。（私が素人であるためどこから開発を進めていくのが適切か判断つかないため、あなたに頼りたいです。）
# 機能範囲 機能範囲については、提案いただいている３要件について満たすWEBアプリケーションとして実装したいと考えています * リアルタイム対戦機能が必要ですか？ * デッキ構築機能も含めますか？ * 1人プレイ（AI対戦）も考えていますか？
## カードデータについて カードデータについてはPythonプログラム(Scraping技術）を利用して画像データ、カード情報をDB化するところまでは済んでいます。
### DB構成 CREATE TABLE card_table (id TEXT, imgpath TEXT, name TEXT, "必要エナジー" TEXT, "消費AP" TEXT, "カード種類" TEXT, "BP" TEXT, "特徴" TEXT, "発生エナジー" TEXT, "効果" TEXT, "トリガー" TEXT )
#### DBデータ中身例
UAPR_CGH-2-004 ./picture/0.cardpicture/UAPR_CGH-2-004.png C.C. 青1 1 キャラクター 2000 黒の騎士団 青 インパクト無効（このキャラとバトルをしたキャラはこのバトル中、（このキャラとバトルをしたキャラはこのバトル中、インパクトを失う）を失う）退場時自分の場のキャラを1枚まで選び、このターン中、自分の場のキャラを1枚まで選び、このターン中、インパクト無効（このキャラとバトルをしたキャラはこのバトル中、を与える。 アクティブ自分の場のキャラを1枚選び、アクティブにし、このターン中、BP+3000。 UAPR_CGH-2-004 ./picture/0.cardpicture/UAPR_CGH-2-004.png C.C. 青1 1 キャラクター 2000 黒の騎士団 青 インパクト無効（このキャラとバトルをしたキャラはこのバトル中、（このキャラとバトルをしたキャラはこのバトル中、インパクトを失う）を失う）退場時自分の場のキャラを1枚まで選び、このターン中、自分の場のキャラを1枚まで選び、このターン中、インパクト無効（このキャラとバトルをしたキャラはこのバトル中、を与える。 アクティブ自分の場のキャラを1枚選び、アクティブにし、このターン中、BP+3000。 自分の場のキャラを1枚選び、アクティブにし、このターン中、BP+3000。 UAPR_CGH-2-004 ./picture/0.cardpicture/UAPR_CGH-2-004.png C.C. 青1 1 キャラクター 2000 黒の騎士団 青
インパクト無効（このキャラとバトルをしたキャラはこのバトル中、（このキャラとバトルをしたキャラはこのバトル中、インパクトを失う）を失う）退場時自分の場のキャラを1枚まで選び、このターン中、自分の場のキャラを1枚まで選び、このターン中、インパクト無効（このキャラとバトルをしたキャラはこのバトル中、を与える。 アクティブ自分の場のキャラを1枚選び、アクティブにし、このターン中、BP+3000。 自分の場のキャラを1枚選び、アクティブにし、このターン中、BP+3000。 UAPR_CGH-2-004 ./picture/0.cardpicture/UAPR_CGH-2-004.png C.C. 青1 1 キャラクター 2000 黒の騎士団 青
インパクト無効（このキャラとバトルをしたキャラはこのバトル中、（このキャラとバトルをしたキャラはこのバトル中、インパクトを失う）を失う）退場時自分の場のキャラを1枚まで選び、このターン中、自分の場のキャラを1枚まで選び、このターン中、インパクト無効（このキャラとバトルをしたキャラはこのバトル中、を与える。 アクティブ自分の場のキャラを1枚選び、アクティブにし、このターン中、BP+3000。 自分の場のキャラを1枚選び、アクティブにし、このターン中、BP+3000。
文言内にで囲っている用語についてはWEB上に画像(alt = text)の形式で記載されており、画像データを文言に置き換えた処理を加えているデータになります。
スクレイピングを行ったコードについて、下記に添付します。 画像データについては、imgpathに記載している内容のリンク先に画像データがある状態です。  で囲まれている文言データの元画像についてはキー値ごとに保存場所を分けております。 添付しているプログラムを参照いただき判断いただければと思います

Phase１　データベースのカードリストを閲覧可能なWEBアプリケーションを構築済みです
Phase２　デッキ編成機能完成済み
Phase３　対戦モードの設定
テスト用のモード、コンピュータ対戦、オンライン対戦機能
⇒テスト用のモードとコンピュータ対戦用のゲームモードを現在構築中です、

# 協力してもらいたい内容
ゲームモード表示画面のUIについて、見づらい状態のためアップデートの対応をお願いしたいです。
自分の手札は扇状のカードスロットを表示する事ができる。（なるべく大きめの画像表示が行えると嬉しいです。）
対戦画面については相手のフィールド、エネルギーに関する情報についても確認可能な画面に一緒に表示が行えること



union-arena-webapp/
├── cardscrap/                  # 既存のスクレイピングフォルダー
│   ├── Card.db                # 既存のSQLiteデータベース
│   ├── picture/               # 既存の画像フォルダー
│   │   ├── 0.cardpicture/
│   │   ├── 1.required_energy/
│   │   └── 3.effect/
│   └── (既存のスクレイピングファイル)
├── backend/                   # Python API (FastAPI)
│   ├── app/
│   │   ├── init.py
│   │   ├── main.py           # FastAPI アプリケーションのエントリーポイント
│   │   ├── models/           # データベースモデル
│   │   │   ├── init.py
│   │   │   └── card.py
│   │   ├── api/              # API エンドポイント
│   │   │   ├── init.py
│   │   │   └── cards.py
│   │   ├── database/         # データベース関連
│   │   │   ├── init.py
│   │   │   └── connection.py
│   │   └── utils/            # ユーティリティ関数
│   │       ├── init.py
│   │       └── helpers.py
│   ├── requirements.txt      # Python依存関係
│   └── run.py               # アプリケーション起動スクリプト
├── frontend/                 # React アプリケーション
│   ├── public/
│   │   └── index.html
│   ├── src/
│   │   ├── components/       # Reactコンポーネント
│   │   │   ├── Card/
│   │   │   │   ├── CardComponent.jsx
│   │   │   │   └── CardComponent.css
│   │   │   ├── GameBoard/
│   │   │   │   ├── GameBoard.jsx
│   │   │   │   └── GameBoard.css
│   │   │   └── Common/
│   │   ├── pages/           # ページコンポーネント
│   │   │   ├── Home.jsx
│   │   │   ├── Game.jsx
│   │   │   └── DeckBuilder.jsx
│   │   ├── services/        # API通信
│   │   │   └── api.js
│   │   ├── utils/           # ユーティリティ
│   │   │   └── helpers.js
│   │   ├── App.js
│   │   ├── App.css
│   │   └── index.js
│   ├── package.json
│   └── package-lock.json
├── docs/                    # ドキュメント
│   ├── api.md
│   └── setup.md
└── README.md